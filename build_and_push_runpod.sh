#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Docker –æ–±—Ä–∞–∑–∞ Mangio RVC –¥–ª—è RunPod
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CUDA –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö GPU

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DOCKER_USERNAME=${DOCKER_USERNAME:-""}
IMAGE_NAME=${IMAGE_NAME:-"mangio-rvc-runpod"}
VERSION=${VERSION:-"latest"}
OPTIMIZED=${OPTIMIZED:-false}
DOCKERFILE="Dockerfile.optimized"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ü–æ–º–æ—â—å
if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ Mangio RVC –¥–ª—è RunPod (CUDA + NVIDIA GPU)"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -u, --username <username>    Docker Hub username (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    echo "  -n, --name <name>           –ò–º—è –æ–±—Ä–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: mangio-rvc-runpod)"
    echo "  -v, --version <version>     –í–µ—Ä—Å–∏—è/—Ç–µ–≥ –æ–±—Ä–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: latest)"
    echo "  --no-cache                  –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫—ç—à–∞"
    echo "  --push-only                 –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ (–±–µ–∑ —Å–±–æ—Ä–∫–∏)"
    echo "  --optimized                 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (CUDA 12.1)"
    echo "  -h, --help                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 -u myusername"
    echo "  $0 -u myusername -n my-rvc-runpod -v 1.0.0"
    echo ""
    echo "–ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ RunPod:"
    echo "  Image: myusername/mangio-rvc-runpod:latest"
    echo "  Port: 3000"
    exit 0
fi

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
NO_CACHE=""
PUSH_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--username)
            DOCKER_USERNAME="$2"
            shift 2
            ;;
        -n|--name)
            IMAGE_NAME="$2"
            shift 2
            ;;
        -v|--version)
            VERSION="$2"
            shift 2
            ;;
        --no-cache)
            NO_CACHE="--no-cache"
            shift
            ;;
        --push-only)
            PUSH_ONLY=true
            shift
            ;;
        --optimized)
            OPTIMIZED=true
            DOCKERFILE="Dockerfile.runpod.optimized"
            shift
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [[ -z "$DOCKER_USERNAME" ]]; then
    error "Docker username –Ω–µ —É–∫–∞–∑–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -u –∏–ª–∏ --username"
    exit 1
fi

# –ü–æ–ª–Ω–æ–µ –∏–º—è –æ–±—Ä–∞–∑–∞
FULL_IMAGE_NAME="${DOCKER_USERNAME}/${IMAGE_NAME}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! command -v docker-compose &> /dev/null; then
    warning "docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º docker compose"
    COMPOSE_CMD="docker compose"
else
    COMPOSE_CMD="docker-compose"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
if ! docker info &> /dev/null; then
    error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Docker Hub
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Docker registry..."
if ! docker pull hello-world &> /dev/null; then
    log "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Docker registry"
    docker login
    if [[ $? -ne 0 ]]; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Docker registry"
        exit 1
    fi
fi

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
if [[ "$PUSH_ONLY" == false ]]; then
    log "–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è RunPod..."
    log "–û–±—Ä–∞–∑: ${FULL_IMAGE_NAME}:${VERSION}"
    if [[ "$OPTIMIZED" == true ]]; then
        log "Dockerfile: ${DOCKERFILE} (CUDA 12.1 + –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)"
    else
        log "Dockerfile: ${DOCKERFILE} (CUDA 11.8)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ buildx –¥–ª—è –º–Ω–æ–≥–æ–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å–±–æ—Ä–∫–∏
    if ! docker buildx version &> /dev/null; then
        error "Docker buildx –Ω–µ –Ω–∞–π–¥–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å–±–æ—Ä–∫–∏ CUDA –æ–±—Ä–∞–∑–∞ –Ω–∞ Apple Silicon"
        exit 1
    fi
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–≤–Ω–µ –±–ª–æ–∫–∞ if)
ARCH=$(uname -m)

if [[ "$PUSH_ONLY" == false ]]; then
    if [[ "$ARCH" == "arm64" ]]; then
        warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω Apple Silicon! –ò—Å–ø–æ–ª—å–∑—É–µ–º buildx –¥–ª—è —Å–±–æ—Ä–∫–∏ AMD64 –æ–±—Ä–∞–∑–∞..."
        
        # –°–æ–∑–¥–∞–Ω–∏–µ builder –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        BUILDER_NAME="runpod-builder"
        if ! docker buildx ls | grep -q "$BUILDER_NAME"; then
            log "–°–æ–∑–¥–∞–Ω–∏–µ buildx builder –¥–ª—è AMD64..."
            docker buildx create --name "$BUILDER_NAME" --use --driver docker-container
        else
            docker buildx use "$BUILDER_NAME"
        fi
        
        # –ó–∞–ø—É—Å–∫ builder
        docker buildx inspect --bootstrap
        
        # –ú–Ω–æ–≥–æ–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è AMD64
        log "–°–±–æ—Ä–∫–∞ AMD64 –æ–±—Ä–∞–∑–∞ —Å –ø–æ–º–æ—â—å—é buildx..."
        docker buildx build \
            --platform linux/amd64 \
            -f ${DOCKERFILE} \
            -t "${FULL_IMAGE_NAME}:${VERSION}" \
            --push \
            $NO_CACHE \
            .
        
        if [[ $? -ne 0 ]]; then
            error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞!"
            exit 1
        fi
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–≥ latest –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if [[ "$VERSION" != "latest" ]]; then
            docker buildx build \
                --platform linux/amd64 \
                -f ${DOCKERFILE} \
                -t "${FULL_IMAGE_NAME}:latest" \
                --push \
                .
        fi
        
        log "–û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ buildx!"
        
    else
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω Intel/AMD64 Mac. –°–±–æ—Ä–∫–∞ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π
        if [[ ! -f "hubert_base.pt" ]] || [[ ! -d "pretrained" ]]; then
            warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏..."
            if [[ -f "download_models.sh" ]]; then
                chmod +x download_models.sh
                ./download_models.sh
            else
                error "–°–∫—Ä–∏–ø—Ç download_models.sh –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                exit 1
            fi
        fi
        
        # –°–±–æ—Ä–∫–∞ —Å docker-compose –¥–ª—è RunPod (—Ç–æ–ª—å–∫–æ –¥–ª—è Intel Mac)
        log "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ —Å –ø–æ–º–æ—â—å—é docker-compose (RunPod –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)..."
        $COMPOSE_CMD -f docker-compose.runpod.yml build $NO_CACHE
        
        if [[ $? -ne 0 ]]; then
            error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞!"
            exit 1
        fi
        
        # –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞
        log "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞..."
        docker tag mangio-rvc-runpod:latest "${FULL_IMAGE_NAME}:${VERSION}"
        
        if [[ "$VERSION" != "latest" ]]; then
            docker tag mangio-rvc-runpod:latest "${FULL_IMAGE_NAME}:latest"
        fi
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ registry –¥–ª—è Intel Mac
        log "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ registry..."
        docker push "${FULL_IMAGE_NAME}:${VERSION}"

        if [[ $? -ne 0 ]]; then
            error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞–∑–∞!"
            exit 1
        fi

        if [[ "$VERSION" != "latest" ]]; then
            docker push "${FULL_IMAGE_NAME}:latest"
        fi
    fi
fi

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ
log "–û–±—Ä–∞–∑ –¥–ª—è RunPod —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
echo ""
echo "–û–±—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:"
echo "  ${FULL_IMAGE_NAME}:${VERSION}"
if [[ "$VERSION" != "latest" ]]; then
    echo "  ${FULL_IMAGE_NAME}:latest"
fi
echo ""
info "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è RunPod:"
echo "  Docker Image: ${FULL_IMAGE_NAME}:${VERSION}"
echo "  Exposed Port: 3000"
if [[ "$OPTIMIZED" == true ]]; then
    echo "  GPU Support: NVIDIA CUDA 12.1 (–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)"
else
    echo "  GPU Support: NVIDIA CUDA 11.8"
fi
echo ""
echo "üí° –í RunPod –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "  1. Template: Custom"
echo "  2. Image: ${FULL_IMAGE_NAME}:${VERSION}"
echo "  3. Port: 3000"
echo "  4. Volume: /workspace (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"

log "–ì–æ—Ç–æ–≤–æ!" 